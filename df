[33mcommit ce9eccb88c4fc36401f59bb109969428bbd003dd[m[33m ([m[1;36mHEAD -> [m[1;32mdevelopment[m[33m, [m[1;31morigin/master[m[33m, [m[1;31morigin/HEAD[m[33m, [m[1;32mmaster[m[33m)[m
Author: BOUDIK ANDRIY <UKR0020792@AWAH-UA.UA.AUCHAN.COM>
Date:   Wed Jan 30 14:34:03 2019 +0200

    Real files

[1mdiff --git a/GEtUSers1.py b/GEtUSers1.py[m
[1mnew file mode 100644[m
[1mindex 0000000..3b4547b[m
[1m--- /dev/null[m
[1m+++ b/GEtUSers1.py[m
[36m@@ -0,0 +1,266 @@[m
[32m+[m[32m# -*- coding: utf-8 -*-[m
[32m+[m[32m"""[m
[32m+[m[32mCreated on Wed Jan 30 14:17:25 2019[m
[32m+[m
[32m+[m[32m@author: UKR0020792[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32m# -*- coding: utf-8 -*-[m
[32m+[m[32m"""[m
[32m+[m[32mCreated on Wed Dec 26 21:05:32 2018[m
[32m+[m
[32m+[m[32m@author: fuand[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32mfrom sqlalchemy import create_engine[m
[32m+[m[32mfrom sqlalchemy.ext.declarative import declarative_base[m
[32m+[m[32mfrom sqlalchemy import Sequence[m
[32m+[m[32mfrom sqlalchemy.orm import sessionmaker[m
[32m+[m[32mfrom sqlalchemy import ForeignKey[m
[32m+[m[32mfrom sqlalchemy.orm import relationship[m
[32m+[m[32mimport datetime[m
[32m+[m[32mfrom sqlalchemy.inspection import inspect[m
[32m+[m[32mfrom sqlalchemy import Column, Integer, String, DateTime,Float[m
[32m+[m[32mimport json[m
[32m+[m[32m#cd C:\Users\fuand\OneDrive\–î–æ–∫—É–º–µ–Ω—Ç—ã\work\Python[m
[32m+[m[32m#from sqlalchemy import Column, Integer, DateTime[m
[32m+[m[32mengine = create_engine('sqlite:///orderman7.db')[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mSession = sessionmaker(bind=engine)[m
[32m+[m[32mBases = declarative_base()[m
[32m+[m
[32m+[m
[32m+[m[32m#Base.metadata.create_all(engine)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m############################start record adding###############################[m
[32m+[m[32msession = Session()[m
[32m+[m
[32m+[m
[32m+[m[32m##########################GEn classes###################[m
[32m+[m
[32m+[m[32m########################Inthago###################################[m[41m [m
[32m+[m[32mclass Inthago_dev(object):[m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m    def __init__(self,json):[m
[32m+[m[32m         self.json = json[m
[32m+[m[32m         self.data = {}[m
[32m+[m[32m         self.obj = Bases()[m
[32m+[m[32m         self.vals=[][m
[32m+[m[32m         self.d={}[m
[32m+[m[32m         self.types={"<class 'str'>":"String","<class 'int'>":"Integer"}[m
[32m+[m[41m    [m
[32m+[m[32m    def create_tables_dict(self,main_table_name):[m
[32m+[m[32m      create_classes={}[m
[32m+[m[32m      self.main_table_name = main_table_name[m
[32m+[m[32m      main_table = str(main_table_name).capitalize()[m
[32m+[m[32m#      attr_dict = {'__tablename__':main_table.lower(),'id': Column(Integer, primary_key=True), '__table_args__':{'extend_existing': True} }[m
[32m+[m[32m      attr_dict = {'__tablename__':main_table.capitalize(),'id': Column(Integer, primary_key=True), '__table_args__':{'extend_existing': True} }[m
[32m+[m[32m      create_classes[main_table]= type('%s' % main_table,(Bases,),attr_dict)[m
[32m+[m[32m      print(create_classes,'\n',main_table,'\n')[m
[32m+[m[32m      for key,value in self.json.items():[m
[32m+[m[32m         print('adhasjkhdashdasl!!!!!!!!!',value,type(value),self.same_type(value))[m
[32m+[m[32m         types = self.same_type(value)[m[41m [m
[32m+[m[32m         ll = [][m
[32m+[m[32m         if isinstance( types,type):[m
[32m+[m[41m             [m
[32m+[m[32m             ll.append(types)[m
[32m+[m[32m             types = ll[m
[32m+[m[32m         else:[m
[32m+[m[32m             types = types[m
[32m+[m[32m         if ((isinstance(value,list) and any((list,dict in types))) or isinstance(value,dict)):[m
[32m+[m[32m             rest_tables=str(key)[m
[32m+[m[32m             attr_dict = {'__tablename__':rest_tables.capitalize(),'id': Column(Integer, primary_key=True)}[m
[32m+[m[32m             create_classes[rest_tables]= type('%s' % rest_tables.capitalize(),(Bases,),attr_dict)[m
[32m+[m[32m             print(create_classes,'\n',rest_tables,'\n')[m
[32m+[m
[32m+[m[32m      self.data.update(create_classes)[m
[32m+[m[41m      [m
[32m+[m
[32m+[m[32m    def main_table_dict(self):[m
[32m+[m[32m#        types={"<class 'str'>":"String","<class 'int'>":"Integer"}[m
[32m+[m[32m        obj = set(self.data) - set(self.json)[m
[32m+[m[32m        obj =  self.data.get(list(obj)[0])[m
[32m+[m[32m#        backpop = str(list(set(self.data) - set(self.json))[0])[m
[32m+[m[32m        backpop =obj.__name__.lower()[m
[32m+[m[32m        val_cols = list(set(self.json) - set(self.data))#Columns[m
[32m+[m[32m#        cols = [][m
[32m+[m[32m        cols = {}[m
[32m+[m[32m        for i in val_cols:[m
[32m+[m[32m            cols.update({i:self.types[str(type(i))]})[m
[32m+[m[32m#            if isinstance(i,list):[m
[32m+[m[32m#                if (len(i)<=1):[m
[32m+[m[32m#                    cols.update({i})[m
[32m+[m[32m        val_rels = list(set(self.json) - set(val_cols))[m
[32m+[m[32m        rels = {}[m
[32m+[m[32m        for i in val_rels:[m
[32m+[m[32m            print(backpop.lower())[m
[32m+[m[32m#            rels.update({i:relationship('"'+str(i)+'"',back_populates="'"+backpop.lower()+"'",cascade="all, delete, delete-orphan")})[m
[32m+[m[32m            rels.update({i:'mock'})[m
[32m+[m[32m        #rels.append(i)[m
[32m+[m[32m    #res = [{obj:vals}][m
[32m+[m[32m        res =[{"table":obj,"cols":cols,"rels":rels}][m
[32m+[m[32m        return res[m
[32m+[m[41m    [m
[32m+[m[32m    def create_tables(self):[m
[32m+[m[32m        table_dict=globals().update(self.data)[m
[32m+[m[32m        return table_dict[m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m    def merges(self):[m
[32m+[m[32m        d1 = self.data[m
[32m+[m[32m        d2 = self.json[m
[32m+[m[32m        merged={}[m
[32m+[m[32m        for k,v in d1.items():[m
[32m+[m[32m            try:[m
[32m+[m[32m                merged.update({v:d2[k]})[m
[32m+[m[32m            except KeyError:[m
[32m+[m[32m                pass[m
[32m+[m[32m        return merged[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m    def sign_skel(self,l):[m
[32m+[m[41m        [m
[32m+[m[32m        for k,v in l.items():[m
[32m+[m[32m            i=0[m
[32m+[m[32m            self.d.update({k:{}})[m
[32m+[m[32m            for listval in v:[m
[32m+[m[32m                i +=1[m
[32m+[m[32m                key_l = str(k)+'_'+str(i)[m
[32m+[m[32m                key =str(k)[m
[32m+[m[32m                if isinstance(listval,list):[m
[32m+[m[32m                    new_l={key_l+'_child':listval}[m
[32m+[m[32m#                    print(new_l,' this is list')[m
[32m+[m[32m                #d.update(new_l)[m
[32m+[m[32m                    self.sign_skel(new_l,self.d)[m
[32m+[m[32m                elif isinstance(listval,dict):[m
[32m+[m[32m                    new_l2={key+'_child':listval}[m
[32m+[m[32m#                    print(new_l2,' this is dict')[m
[32m+[m[32m                    self.d.update(new_l2)[m
[32m+[m[32m#sign_skel(new_l,d)[m
[32m+[m[32m                else:[m
[32m+[m[32m               # print('this is rest')[m
[32m+[m[32m               # print (d[k], ' this is d[k]')[m
[32m+[m[32m#                    print ({key:listval},' this is {key:listval}')[m
[32m+[m[32m                    self.d[k].update({key_l:type(listval)})[m
[32m+[m[32m        return self.d[m[41m [m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m    def max_depth(self,iter_obj,ii,di):[m
[32m+[m
[32m+[m[32m         list_arr = [][m
[32m+[m[32m         for i in iter_obj:[m
[32m+[m[32m             if isinstance(i,list):[m
[32m+[m[32m                 ii += 1[m
[32m+[m[32m                 for element in i:[m
[32m+[m[32m                #print(element,i,type(element))[m
[32m+[m[32m                     if isinstance(element,list):[m
[32m+[m[32m                 #   ii += 1[m
[32m+[m[32m                         list_arr.append(element)[m
[32m+[m[32m                         print(element,i)[m
[32m+[m
[32m+[m[32m         if (len(list_arr)>0):[m
[32m+[m[32m       # ii += 1[m[41m  [m
[32m+[m[32m             di.append({ii:list_arr})[m[41m      [m
[32m+[m[32m             return self.max_depth(list_arr,ii,di)[m
[32m+[m[32m         else:[m
[32m+[m[32m             di.append({ii:list_arr})[m
[32m+[m[32m             return di[-1][m[41m    [m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m    def same_type(self,iterobj):[m
[32m+[m[32m        if isinstance(iterobj,list):[m
[32m+[m[32m            iseq = iter(iterobj)[m
[32m+[m[32m            if (len(iterobj)==0):[m
[32m+[m[32m                return type('string')[m
[32m+[m[32m            elif (len(iterobj)==1):[m[41m [m
[32m+[m[32m                first_type = type(iterobj[0])[m
[32m+[m[32m                return first_type[m
[32m+[m[32m            else:[m[41m    [m
[32m+[m[32m                first_type = type(next(iseq))[m
[32m+[m[32m                return first_type if all( (type(x) is first_type) for x in iseq ) else set(type(x) for x in iterobj)[m
[32m+[m[32m        if isinstance(iterobj,dict):[m
[32m+[m[32m            pass[m
[32m+[m
[32m+[m[32m    def __len__(self):[m
[32m+[m[32m        return len(self.coordinate_row)[m
[32m+[m[41m        [m
[32m+[m[41m        [m
[32m+[m[32m    def rest_tables_dict(self,merged):[m
[32m+[m[32m        depth=[][m
[32m+[m[32m        future_dict=[][m
[32m+[m[32m        for k,v in merged.items():[m
[32m+[m[32m            if isinstance(v,list):[m
[32m+[m[32m                if (list(self.max_depth(v,0,depth).keys())[0]>0):[m
[32m+[m[41m                [m
[32m+[m[32m                    future_dict.append({k:self.sign_skel(v)})[m
[32m+[m[32m                else:[m
[32m+[m[32m                    if (len(v)>1):[m
[32m+[m[32m                        try:[m
[32m+[m[32m                            if(len(self.same_type(v))==1):[m
[32m+[m[32m                                future_dict.append({k:v})[m
[32m+[m[32m                            else:[m
[32m+[m[32m                                if (str in self.same_type):[m
[32m+[m[32m                                    future_dict.append({k:v})[m
[32m+[m[32m                                else:[m
[32m+[m[32m                                    pass[m
[32m+[m[32m                        except TypeError:[m
[32m+[m[32m                            print (k,v,type(v))[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        future_dict.append({k:v})[m
[32m+[m[32m            if isinstance(v,dict):[m
[32m+[m[32m                pass[m
[32m+[m[32m        return future_dict[m[41m                          [m
[32m+[m[41m                                [m
[32m+[m[41m                            [m
[32m+[m[41m                            [m
[32m+[m[41m    [m
[32m+[m[32m    def add_cols(self,obj_dict):[m
[32m+[m[32m        for k,v in obj_dict.items():[m
[32m+[m[32m            for i in v:[m
[32m+[m[32m                setattr(k,i,Column(String))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mf = open('u.json')[m
[32m+[m
[32m+[m[32mu = json.loads(f.read())[m
[32m+[m[32mf.close()[m
[32m+[m[32m#uu = u['contacts_deleted'][m
[32m+[m[32m#ad = Inthago_dev(uu)[m
[32m+[m[32m#tdicts = ad.create_tables_dict('Contacts_Deleted')[m
[32m+[m[32m#w = ad.main_table_dict()[m
[32m+[m
[32m+[m[32mad = Inthago_dev(u)[m
[32m+[m[32mtdicts = ad.create_tables_dict('User')[m
[32m+[m[32mt = ad.create_tables()[m
[32m+[m[32mw = ad.main_table_dict()[m
[32m+[m[32mm = ad.merges()[m
[32m+[m
[32m+[m[32mfor i in w:[m
[32m+[m[32m    for key,attr in i['cols'].items():[m
[32m+[m[32m        print("trying to set col "+str(key)+" of table "+str(i['table'])+" with attr "+str(attr))[m
[32m+[m[32m        setattr(i['table'],str(key),Column(attr))[m
[32m+[m[32m        print("was set col "+str(key)+" of table "+str(i['table'])+" with attr "+ str(attr))[m
[32m+[m
[32m+[m
[32m+[m[32m    for key,attr in i['rels'].items():[m
[32m+[m[32m       setattr(i['table'],str(key),relationship(ad.data[key],back_populates=str(i['table'].__name__.lower()),cascade="all, delete, delete-orphan"))[m
[32m+[m[32m       setattr(ad.data[key],str(i['table'].__name__.lower()) ,relationship(str(i['table'].__name__.capitalize()), back_populates=str(key)))[m
[32m+[m[32m       setattr(ad.data[key],str(i['table'].__name__.lower())+'_id',  Column(Integer, ForeignKey(str(i['table'].__name__.capitalize())+'.id'), nullable=False))[m
[32m+[m[41m       [m
[32m+[m[32m#       if isinstance(ad.json[key],dict):[m
[32m+[m[32m#           nad = Inthago_dev(ad.json[key])[m
[32m+[m[32m#           nad.create_tables_dict(str(key.capitalize()))[m
[32m+[m[32m#           nad.create_tables()[m
[32m+[m[32m#           w.append(nad.main_table_dict())[m
[32m+[m[32m#[m[41m       [m
[32m+[m[32m#[m[41m       [m
\ No newline at end of file[m
[1mdiff --git a/u.json b/u.json[m
[1mnew file mode 100644[m
[1mindex 0000000..6f03e23[m
[1m--- /dev/null[m
[1m+++ b/u.json[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m{"registered_at": "auchan", "emails": ["sniper060683@gmail.com"], "delivered_orders": [{"title": "2018-09-08 17:53", "text": "2018-09-08", "network": "auchan", "id": "bda3b7a5-53f9-456a-9777-e67af1961d6a", "status": "delivered", "in_query": false}, {"title": "2018-12-18 16:06", "text": "2018-12-18", "network": "auchan", "id": "04ac79fe-f0bb-4d23-a585-e087bb82c897", "status": "delivered", "in_query": false}, {"title": "2018-12-21 14:58", "text": "2018-12-21", "network": "auchan", "id": "d0f7a49b-2c40-4566-8e58-2b4f74ccccd2", "status": "delivered", "in_query": false}], "addresses": ["\u041a\u0438\u0457\u0432, \u043f\u0440\u043e\u0441\u043f\u0435\u043a\u0442 \u0410\u043a\u0430\u0434\u0435\u043c\u0456\u043a\u0430 \u0413\u043b\u0443\u0448\u043a\u043e\u0432\u0430 10", "\u041a\u0438\u0457\u0432, \u0432\u0443\u043b\u0438\u0446\u044f \u041a\u043e\u0436\u0443\u043c'\u044f\u0446\u044c\u043a\u0430 12 \u0412, apt. 0"], "contacts_deleted": {"email": [], "phone": ["380996777926"], "address": ["\u043f\u0440\u043e\u0441\u043f\u0435\u043a\u0442 \u0410\u043a\u0430\u0434\u0435\u043c\u0456\u043a\u0430 \u0413\u043b\u0443\u0448\u043a\u043e\u0432\u0430, 10, \u041a\u0438\u0457\u0432, \u0423\u043a\u0440\u0430\u0438\u043d\u0430, 02000", "\u0432\u0443\u043b\u0438\u0446\u044f \u041a\u043e\u0436\u0443\u043c'\u044f\u0446\u044c\u043a\u0430, 12, \u041a\u0438\u0457\u0432, \u0423\u043a\u0440\u0430\u0438\u043d\u0430, 02000"]}, "type": "ordinary", "names": ["\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041a\u043e\u0440\u0431\u0443\u0442"], "registered": "2018-08-28 16:58", "orders_dist_stats": {"avg": 55.47, "acc": -107.15, "var": 53.58}, "user_login_stores": [], "user_id": "9606318", "phones": ["380683133744"], "comments": [], "mails": [{"id": "csv_auchan_rlo_60_191018", "date": "2018-10-19T11:58:14Z", "mailing_internal_title": "auchan_rlo_60_191018"}], "others_orders": [{"title": "2018-08-29 15:50", "text": "2018-08-29", "network": "auchan", "id": "b9062757-90eb-4278-9256-5b411e60d411", "status": "cancelled", "in_query": false}]}[m
\ No newline at end of file[m
